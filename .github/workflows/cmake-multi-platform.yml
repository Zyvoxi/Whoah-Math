name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install dependencies on Windows
      if: matrix.os == 'windows-latest'
      run: |
        choco install mingw
        choco install ninja
        choco install cmake

    - name: Configure CMake on Windows
      if: matrix.os == 'windows-latest'
      run: |
        mkdir build
        cd build
        cmake -G "Ninja" -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} ..

    - name: Configure CMake on Ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} \
              -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
              -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -S ${{ github.workspace }}

    - name: Build on Windows
      if: matrix.os == 'windows-latest'
      run: |
        cmake --build build --config ${{ matrix.build_type }}

    - name: Build on Ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Copy DLLs on Windows
      if: matrix.os == 'windows-latest'
      run: |
        mkdir -p build/Release
        cp C:/mingw64/bin/libstdc++-6.dll build/Release/
        cp C:/mingw64/bin/libgcc_s_seh-1.dll build/Release/

    - name: Archive Artifacts on Windows
      if: matrix.os == 'windows-latest'
      run: |
        cd build/Release
        Compress-Archive -Path . -DestinationPath Whoah-Math.zip
        mv Whoah-Math.zip $GITHUB_WORKSPACE/

    - name: Archive Artifacts on Ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd ${{ steps.strings.outputs.build-output-dir }}
        zip -r Whoah-Math.zip *
        mv Whoah-Math.zip $GITHUB_WORKSPACE/

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Whoah Math - ${{ matrix.os }}
        path: $GITHUB_WORKSPACE/Whoah-Math.zip

    - name: Test on Windows
      if: matrix.os == 'windows-latest'
      working-directory: build
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Test on Ubuntu
      if: matrix.os == 'ubuntu-latest'
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}
