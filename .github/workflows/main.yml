name: Build Whoah-Math

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-macos:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v4

    - name: Cache derived data
      uses: actions/cache@v3
      with:
        path: build
        key: macos-xcode-${{ runner.os }}-${{ hashFiles('**/Podfile.lock') }}

    - name: Build with Xcode
      run: |
        xcodebuild -scheme Whoah -configuration Release -derivedDataPath build -disableAutomaticPackageResolution | xcbeautify

    - name: Archive Artifacts
      run: |
        cd build/Build/Products/Release
        zip -r Whoah-Math.zip *
        mv Whoah-Math.zip $GITHUB_WORKSPACE/

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Whoah Math - macOS
        path: Whoah-Math.zip

  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Cache CMake build directory
      uses: actions/cache@v3
      with:
        path: build
        key: cmake-${{ runner.os }}-${{ hashFiles('CMakeLists.txt') }}
        restore-keys: |
          cmake-${{ runner.os }}-

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          echo "artifact-name=Whoah-Math - Windows" >> "$GITHUB_OUTPUT"
          echo "executable-path=${{ steps.strings.outputs.build-output-dir }}\\Release\\Whoah-Math.exe" >> "$GITHUB_OUTPUT"
        elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          echo "artifact-name=Whoah-Math - Ubuntu" >> "$GITHUB_OUTPUT"
          echo "executable-path=${{ steps.strings.outputs.build-output-dir }}/Whoah-Math" >> "$GITHUB_OUTPUT"
        fi

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}

    - name: Debug - List directory contents
      run: |
        echo "Listing contents of ${{ steps.strings.outputs.build-output-dir }}"
        ls -R ${{ steps.strings.outputs.build-output-dir }}

    - name: Validate Executable Existence
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          if (Test-Path "${{ steps.strings.outputs.build-output-dir }}\Release\Whoah-Math.exe") { Write-Host "Executable exists." } else { throw "Executable not found." }
        elif [ "${{ matrix.os }}" = "ubuntu-latest" ]; then
          test -f "${{ steps.strings.outputs.build-output-dir }}/Whoah-Math"
        fi

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.strings.outputs.artifact-name }}
        path: ${{ steps.strings.outputs.executable-path }}

    - name: Clean up old caches (Bash)
      if: runner.os != 'Windows'
      run: |
        gh api -X GET repos/${{ github.repository }}/actions/caches \
          -F per_page=100 \
          -F direction=asc \
          | jq '.actions_caches | map(select(.created_at < (now - 30*86400))) | .[].id' \
          | xargs -n1 -I % gh api -X DELETE repos/${{ github.repository }}/actions/caches/%

    - name: Clean up old caches (PowerShell)
      if: runner.os == 'Windows'
      run: |
        $caches = gh api -X GET repos/${{ github.repository }}/actions/caches
        $cacheIds = $caches | ConvertFrom-Json | ForEach-Object { $_.actions_caches | Where-Object { $_.created_at -lt ((Get-Date).AddDays(-30)) } | Select-Object -ExpandProperty id }
        foreach ($id in $cacheIds) {
          gh api -X DELETE repos/${{ github.repository }}/actions/caches/$id
        }
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
